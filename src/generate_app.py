# T√∂bb tipus√∫ f√°jlt k√©pes gener√°lt n√©ven menteni.

import os
import requests
import json

if not os.path.exists("generated_code"):
    os.makedirs("generated_code")

# OpenRouter API kulcs (helyettes√≠tsd a saj√°toddal)
API_KEY = os.getenv("AI_API_KEY")

# OpenRouter DeepSeek Coder endpoint
API_URL = "https://openrouter.ai/api/v1/chat/completions"

# Toolcalling be√°ll√≠t√°sa
tools = [
    {
        "type": "function",
        "function": {
            "name": "generate_code",
            "description": "Generate raw code for multiple components based on a detailed description. Return a list of codes, filenames, and file extensions, without any additional text or explanations.",
            "parameters": {
                "type": "object",
                "properties": {
                    "components": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "code": {
                                    "type": "string",
                                    "description": "The detailed code generated by the AI for a component."
                                },
                                "filename": {
                                    "type": "string",
                                    "description": "The name of the file where the code should be saved, e.g., 'LoginScreen.jsx' or 'main.cpp'."
                                },
                                "file_extension": {
                                    "type": "string",
                                    "description": "The file extension, e.g., '.jsx', '.cpp', '.py'."
                                }
                            },
                            "required": ["code", "filename", "file_extension"]
                        },
                        "description": "A list of components, each containing code, a filename, and a file extension."
                    }
                },
                "required": ["components"]
            }
        }
    }
]

def read_files_from_folder(folder_path):
    files = {}
    for filename in os.listdir(folder_path):
        file_path = os.path.join(folder_path, filename)
        if os.path.isfile(file_path):
            with open(file_path, "r", encoding="utf-8") as file:
                files[filename] = file.read()
    return files

# Prompt: K√≥d gener√°l√°s
prompt = """
Gener√°lj egy react komponenst, ami beolvassa a felhaszn√°l√≥ nev√©t √©s ezt menti local storage-ba √©s egy m√°sik komponenst ami ezeket ki√≠rja.
"""
prompt1 = """
Gener√°lj egy egyszer≈± weboldalt react framworkkel, ami tartalmaz egy men√ºt, egy c√≠msort √©s egy bekezd√©st.
"""

prompt2 = """
Gener√°lj egy javascript adatb√°zist a k√©peknek.
"""

files = read_files_from_folder("generated_code").items()
if files:
    prompt += " Kiindul√°snak haszn√°ld az al√°bbi f√°ljlokat √©s add vissza az √∫jakkal egy√ºtt:"
    for filename, content in files:
        prompt += f"\n-----------------------------------------------\nA {filename} tartalma:\n\n{content}\n"

# API k√©r√©s el≈ëk√©sz√≠t√©se
headers = {
    "Authorization": f"Bearer {API_KEY}",
    "Content-Type": "application/json"
}

data = {
    "model": "google/gemini-2.0-pro-exp-02-05:free",
    "messages": [{"role": "user", "content": prompt}],
    "tools": tools,  # Toolcalling megad√°sa
    "tool_choice": {"type": "function", "function": {"name": "generate_code"}},  # Explicit eszk√∂z kiv√°laszt√°sa
    "max_tokens": 8000  # Limit√°ljuk a v√°laszt
}

# API h√≠v√°s
try:
    #import logging
    #logging.basicConfig(level=logging.INFO)

    #logging.info("\n --Promptseparator-- \n".join([x["content"] for x in data["messages"]]))
    response = requests.post(API_URL, headers=headers, json=data, timeout=10)

    # V√°lasz feldolgoz√°sa
    if response.status_code == 200:
        result = response.json()

        if "choices" in result:
            message = result["choices"][0]["message"]

            # Tool calling v√°lasz ellen≈ërz√©se
            if "tool_calls" in message:
                for tool_call in message["tool_calls"]:
                    tool_name = tool_call["function"]["name"]
                    tool_args = json.loads(tool_call["function"]["arguments"])

                    if tool_name == "generate_code":
                        components = tool_args.get("components", [])
                        print(f"üõ†Ô∏è Received {len(components)} components from AI.")

                        for component in components:
                            code = component.get("code")
                            filename = component.get("filename", "component")  # Alap√©rtelmezett f√°jln√©v, ha nincs megadva
                            file_extension = component.get("file_extension", ".txt")  # Alap√©rtelmezett kiterjeszt√©s, ha nincs megadva
                            full_filename = f"{filename}"
                            print(f"üìÑ Filename: {full_filename}")
                            #print("üü¢ Code:")
                            #print(code)

                            # K√≥d ment√©se f√°jlba
                            os.makedirs("generated_code", exist_ok=True)
                            with open(f"generated_code/{full_filename}", "w", encoding="utf-8") as file:
                                file.write(code)
                                print(f"‚úÖ Code saved to 'generated_code/{full_filename}'.")

            # Ha nincs tool calling, akkor a sz√∂veges v√°laszt √≠rjuk ki
            elif "content" in message:
                print("üí¨ Assistant response:", message["content"])

        else:
            print("‚ùå Hiba t√∂rt√©nt (v√°lasz form√°tuma ismeretlen):", json.dumps(result, indent=2))

    else:
        print("‚ùå Hiba t√∂rt√©nt:", response.text)

except requests.Timeout:
    print("‚ùå Hiba t√∂rt√©nt: az API h√≠v√°s t√∫ll√©pte az id≈ëkorl√°tot.")
except requests.RequestException as e:
    print(f"‚ùå Hiba t√∂rt√©nt: {e}")

print("üëã Program v√©ge.")
